// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require(['jquery', 'util'], function($, U) {
    var Basic, Css, Handler, spreader;
    Basic = (function() {
      function Basic() {}

      Basic.prototype._map = {};

      Basic.prototype.isCustom = function(name) {
        return !!this._map[name];
      };

      Basic.prototype.getHandler = function(name) {
        return this._map[name];
      };

      Basic.prototype._getC = function(dom, name) {
        var handler;
        handler = this.getHandler(name);
        return handler.get.call(this, dom, name);
      };

      Basic.prototype._setC = function(dom, name, value) {
        var data, handler, id,
          _this = this;
        handler = this.getHandler(name);
        if (handler.related) {
          id = handler._id;
          (data = {})[name] = value;
          return this.queue.push(id, function(data) {
            return handler.set.call(_this, dom, data);
          }, data);
        } else {
          data = {};
          data[name] = value;
          return handler.set.call(this, dom, data);
        }
      };

      Basic.prototype.gcc = function(prop) {
        var div, prefix, prefixes, sty, vendor, _i, _len, _prop;
        div = document.createElement('div');
        sty = div.style;
        if (sty[prop] !== void 0) {
          return prop;
        }
        prefixes = ['Moz', 'webkit', 'O', 'ms'];
        _prop = U.firstLetterUpper(prop);
        for (_i = 0, _len = prefixes.length; _i < _len; _i++) {
          prefix = prefixes[_i];
          vendor = prefix + _prop;
          if (sty[vendor] !== void 0) {
            return vendor;
          }
        }
        return false;
      };

      Basic.prototype.extend = function(cCss, funcs) {
        var a, arr, name, _i, _id, _len;
        if ($.isArray(cCss)) {
          arr = cCss;
        } else if (typeof cCss === 'object') {
          arr = [];
          for (name in cCss) {
            arr.push(name);
          }
        } else {
          arr = [cCss];
        }
        _id = arr.join('0');
        funcs._id = _id;
        for (_i = 0, _len = arr.length; _i < _len; _i++) {
          a = arr[_i];
          this._map[a] = funcs;
        }
        return this;
      };

      return Basic;

    })();
    spreader = new Basic();
    Handler = (function(_super) {
      __extends(Handler, _super);

      function Handler(css, dom, opts) {
        var $dom;
        this.$dom = $dom = $(dom);
        this.initOriginCss(css);
        this._css = css;
        this.queue = new U.Queue();
        this.initStep();
        this;
      }

      Handler.prototype.initOriginCss = function(css) {
        var $d, C, va, _i, _len, _results, _results1;
        $d = this.$dom;
        C = Css;
        this._o = {};
        if ($.isArray(css)) {
          _results = [];
          for (_i = 0, _len = css.length; _i < _len; _i++) {
            va = css[_i];
            _results.push(this._o[va] = this.get(va));
          }
          return _results;
        } else if (typeof css === 'object') {
          _results1 = [];
          for (va in css) {
            _results1.push(this._o[va] = this.get(va));
          }
          return _results1;
        } else {
          return this.onError('type error in initOriginCss');
        }
      };

      Handler.prototype.initStep = function() {
        var endC, startC,
          _this = this;
        endC = this._css;
        startC = this._o;
        return this.step = function(p) {
          var va, _cur;
          _cur = {};
          for (va in endC) {
            _cur[va] = U.awu('-', endC[va], startC[va]);
            _cur[va] = U.awu('*', _cur[va], p);
            _cur[va] = U.awu('+', _cur[va], startC[va]);
          }
          return _this.set(_cur);
        };
      };

      Handler.prototype.get = function(name) {
        return this._attr('get', name);
      };

      Handler.prototype.set = function(css) {
        var key, value;
        for (key in css) {
          value = css[key];
          this._attr('set', key, value);
        }
        return this.queue.next();
      };

      Handler.prototype._attr = function(method, name, value) {
        var args, cc;
        args = [].slice.call(arguments, 1);
        if ((cc = this.gcc(name))) {
          return this.$dom.css.apply(this.$dom, args);
        } else if (this.isCustom(name)) {
          args.unshift(this.$dom);
          return this['_' + method + 'C'].apply(this, args);
        } else {

        }
      };

      return Handler;

    })(Basic);
    Css = {
      handle: function(css, dom, opts) {
        return new Handler(css, dom, opts);
      },
      spreadCss: function(cCss, funcs) {
        return spreader.extend(cCss, funcs);
      }
    };
    return Css;
  });

}).call(this);
