// Generated by CoffeeScript 1.6.3
(function() {
  define(['../util/util', './data', './gcc', './custom', '../promise/type', '../error'], function(U, data, gcc, C, type, err) {
    var Handler;
    Handler = (function() {
      function Handler(css, dom, opts) {
        var $dom;
        this.$dom = $dom = $(dom);
        this.initOriginCss(css);
        this._css = css;
        this.queue = new U.Queue();
        this.initStep();
        this;
      }

      Handler.prototype.initOriginCss = function(css) {
        var $d, va, _i, _len, _results, _results1;
        $d = this.$dom;
        this._o = {};
        if (type('array', css)) {
          _results = [];
          for (_i = 0, _len = css.length; _i < _len; _i++) {
            va = css[_i];
            _results.push(this._o[va] = this.get(va));
          }
          return _results;
        } else if (type('object', css)) {
          _results1 = [];
          for (va in css) {
            _results1.push(this._o[va] = this.get(va));
          }
          return _results1;
        } else {
          return err('type error in initOriginCss');
        }
      };

      Handler.prototype.initStep = function() {
        var endC, startC,
          _this = this;
        endC = this._css;
        startC = this._o;
        return this.step = function(p) {
          var va, _cur;
          _cur = {};
          for (va in endC) {
            _cur[va] = U.awu('-', endC[va], startC[va]);
            _cur[va] = U.awu('*', _cur[va], p);
            _cur[va] = U.awu('+', _cur[va], startC[va]);
          }
          return _this.set(_cur);
        };
      };

      Handler.prototype.get = function(name) {
        return this._attr('get', name);
      };

      Handler.prototype.set = function(css) {
        var key, value;
        for (key in css) {
          value = css[key];
          this._attr('set', key, value);
        }
        return this.queue.next();
      };

      Handler.prototype._attr = function(method, name, value) {
        var args, cc;
        args = [].slice.call(arguments, 1);
        if ((cc = gcc(name))) {
          return this.$dom.css.apply(this.$dom, args);
        } else if (C.isCustom(name)) {
          args.unshift(this.$dom);
          args.push(this.queue);
          return C[method].apply(C, args);
        } else {

        }
      };

      return Handler;

    })();
    return function(css, dom, opts) {
      var handlers, step;
      handlers = [];
      dom.each(function(ind, d) {
        return handlers.push(new Handler(css[ind] || css, d, opts));
      });
      step = function(p) {
        var handler, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = handlers.length; _i < _len; _i++) {
          handler = handlers[_i];
          _results.push(handler.step(p));
        }
        return _results;
      };
      return step;
    };
  });

}).call(this);
