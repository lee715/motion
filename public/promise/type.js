// Generated by CoffeeScript 1.6.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['../object/toString', '../array/toArray', '../array/last', '../array/str2arr', '../function/returnTrue', '../function/returnFalse'], function(toString, toArray, last, str2arr, returnTrue, returnFalse) {
    var Type, check, isArrayLike, valids;
    valids = {
      'string': function(str) {
        return typeof str === 'string';
      },
      'function': function() {
        return $.isFunction.apply(null, arguments);
      },
      'number': function() {
        return $.isNumeric.apply(null, arguments);
      },
      'emptyObject': function() {
        return $.isEmptyObject.apply(null, arguments);
      },
      'plainObject': function() {
        return $.isPlainObject.apply(null, arguments);
      },
      'window': function() {
        return $.isWindow.apply(null, arguments);
      },
      'array': function() {
        return $.isArray.apply(null, arguments);
      },
      'object': function(obj) {
        return toString.call(obj) === '[object Object]';
      },
      'undefined': function(param) {
        return typeof param === 'undefined';
      },
      'arrayLike': function(arrLike) {
        return isArrayLike(arrLike);
      }
    };
    isArrayLike = function(obj) {
      var len, type, _ref;
      len = obj.length;
      type = $.type(obj);
      if (type === 'function' || $.isWindow(obj)) {
        return false;
      }
      if (obj.nodeType === 1 && len) {
        return true;
      }
      return type === 'array' || len === 0 || typeof len === 'number' && len > 0 && (_ref = len - 1, __indexOf.call(obj, _ref) >= 0);
    };
    check = function(type, args) {
      if (!valids[type]) {
        if (args['be'] === type) {
          return true;
        } else {
          return false;
        }
      } else if (!valids[type](args)) {
        return false;
      } else {
        return true;
      }
    };
    return Type = function(types, args, callback) {
      var i, res, type, _i, _len;
      if (valids['undefined'](args)) {
        return $.type.apply(null, arguments);
      } else {
        res = true;
        types = str2arr(types);
        if (types.length === 1) {
          args = [args];
        }
        if (types.length) {
          for (i = _i = 0, _len = types.length; _i < _len; i = ++_i) {
            type = types[i];
            if (!check(type, args[i])) {
              return res = false;
            }
          }
        } else {
          err('Unrecognized Type', types);
          res = false;
        }
        if (res && callback) {
          return callback.apply(null, args);
        } else {
          return res;
        }
      }
    };
  });

}).call(this);
