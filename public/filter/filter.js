// Generated by CoffeeScript 1.6.3
(function() {
  define(['../promise/type', '../array/str2arr', '../array/insert', '../array/indexOf', '../graphic/factory'], function(type, str2arr, insert, indexOf, F) {
    var Filter, filter;
    Filter = (function() {
      function Filter(orders, funcs) {
        var i, order, _funcs, _i, _j, _len, _len1;
        this.orders = orders = str2arr(orders);
        this.stack = {};
        if (!type('array', funcs)) {
          _funcs = [];
          for (_i = 0, _len = orders.length; _i < _len; _i++) {
            order = orders[_i];
            _funcs.push(funcs[order] || function() {});
          }
          funcs = _funcs;
        }
        for (i = _j = 0, _len1 = orders.length; _j < _len1; i = ++_j) {
          order = orders[i];
          this.stack[order] = [funcs[i]];
          this[order] = (function(order) {
            var _this = this;
            return function(param) {
              return _this.stack[order].push(param);
            };
          }).call(this, order);
        }
        this;
      }

      Filter.prototype.register = function(name, func, prev) {
        var ind, os;
        os = this.orders;
        ind = prev && indexOf(os, prev) || 0;
        insert(os, name, ind + 1);
        this.stack[name] = [func];
        return this;
      };

      Filter.prototype.filter = function(p) {
        var arr, func, o, os, pa, params, st, _i, _len;
        if (!type('point', p)) {
          p = F.get('point', p);
        }
        os = this.orders;
        st = this.stack;
        for (_i = 0, _len = os.length; _i < _len; _i++) {
          o = os[_i];
          arr = st[o];
          func = arr[0];
          params = arr.slice(1);
          while (pa = params.shift()) {
            if (func.call(p, pa) === false) {
              return p;
            }
          }
        }
        return p;
      };

      return Filter;

    })();
    return filter = function(orders, funcs) {
      return new Filter(orders, funcs);
    };
  });

}).call(this);
