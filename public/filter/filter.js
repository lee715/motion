// Generated by CoffeeScript 1.6.3
(function() {
  define(['../promise/type', '../array/str2arr', '../array/insert', '../array/indexOf', '../array/toLength', '../graphic/factory'], function(type, str2arr, insert, indexOf, toLength, F) {
    var Filter, Funcs, filter, multi, sym, translate;
    translate = function(p) {
      return this.translate(p);
    };
    multi = function(p) {
      return this.multi(p);
    };
    sym = function(p) {
      return this.sym(p);
    };
    Funcs = {
      translate: translate,
      multi: multi,
      sym: sym
    };
    Filter = (function() {
      function Filter(orders, funcs) {
        var func, i, order, _funcs, _i, _j, _len, _len1;
        this.orders = orders = str2arr(orders);
        this.stack = {};
        if (!type('array', funcs)) {
          _funcs = [];
          for (_i = 0, _len = orders.length; _i < _len; _i++) {
            order = orders[_i];
            _funcs.push(funcs[order] || function() {});
          }
          funcs = _funcs;
        }
        for (i = _j = 0, _len1 = orders.length; _j < _len1; i = ++_j) {
          order = orders[i];
          func = this.getFunc(funcs[i]);
          this.stack[order] = [func];
          this[order] = (function(order) {
            var _this = this;
            return function(param) {
              return _this.stack[order].push(param);
            };
          }).call(this, order);
        }
        this;
      }

      Filter.prototype.getFunc = function(func) {
        if (type('string', func)) {
          return Funcs[func];
        } else {
          return func;
        }
      };

      Filter.prototype.register = function(name, func, prev) {
        var ind, os;
        os = this.orders;
        ind = prev && indexOf(os, prev) || 0;
        insert(os, name, ind + 1);
        func = this.getFunc(func);
        this.stack[name] = [func];
        return this;
      };

      Filter.prototype.extend = function(name, func) {
        return Funcs[name] = func;
      };

      Filter.prototype.filter = function(p) {
        var arr, func, o, os, pa, params, st, _i, _len;
        if (!type('point', p)) {
          p = F.get('point', p);
        }
        os = this.orders;
        st = this.stack;
        for (_i = 0, _len = os.length; _i < _len; _i++) {
          o = os[_i];
          arr = st[o];
          func = arr[0];
          params = arr.slice(1);
          while (pa = params.shift()) {
            if (func.call(p, pa) === false) {
              return p;
            }
          }
        }
        return p;
      };

      return Filter;

    })();
    filter = function(orders, funcs) {
      return new Filter(orders, funcs);
    };
    return filter;
  });

}).call(this);
