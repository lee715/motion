// Generated by CoffeeScript 1.6.3
(function() {
  define(['../css/extend', '../css/gcc'], function(extend, gcc) {
    return extend('rotate translate scale', {
      related: true,
      get: function($dom, type) {
        var a, b, c, cos, cssName, d, deg, e, f, matri, matrix, res, sin, sx, sy, x, y;
        cssName = gcc('transform');
        matrix = $dom.css(cssName);
        if (/\d+/.test(matrix)) {
          matri = [];
          matrix.replace(/[\d.]+/g, function(match) {
            matri.push(+match);
            return match;
          });
          a = matri[0];
          b = matri[1];
          c = matri[2];
          d = matri[3];
          e = matri[4];
          f = matri[5];
          sx = Math.sqrt(a * a + b * b);
          sy = Math.sqrt(c * c + d * d);
          sin = c / sy;
          cos = a / sx;
          deg = U.getDeg(sin, cos);
          y = f * cos / sy - e * sin / sx;
          x = (e / sx + y * sin) / cos;
          res = {
            rotate: deg,
            translate: x + ',' + y,
            scale: sx + ',' + sy
          };
        } else {
          res = {
            rotate: 0,
            translate: '0,0',
            scale: '0,0'
          };
        }
        if (type) {
          return res[type];
        } else {
          return res;
        }
      },
      set: function($dom, css, callback) {
        var a, arr, b, c, cos, cs, cssName, d, e, f, rad, res, sin, sx, sy, va, x, y;
        cssName = gcc('transform');
        sx = 1;
        sy = 1;
        sin = 0;
        rad = 0;
        cos = 1;
        x = 0;
        y = 0;
        for (va in css) {
          cs = css[va];
          switch (va) {
            case 'rotate':
              rad = +cs * Math.PI / 180;
              sin = Math.sin(rad);
              cos = Math.cos(rad);
              break;
            case 'translate':
              arr = cs.split(',');
              x = +arr[0];
              y = +arr[1];
              break;
            case 'scale':
              arr = cs.split(',');
              sx = +arr[0];
              sy = +arr[1];
              break;
          }
        }
        a = sx * cos;
        b = -sx * sin;
        c = sy * sin;
        d = sy * cos;
        e = sx * (x * cos - y * sin);
        f = sy * (x * sin + y * cos);
        res = {};
        res[cssName] = 'matrix(' + [a, b, c, d, e, f].join(',') + ')';
        if ($dom != null) {
          $dom.css(res);
        }
        if (typeof callback === "function") {
          callback();
        }
        return res;
      }
    });
  });

}).call(this);
