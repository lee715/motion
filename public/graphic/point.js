// Generated by CoffeeScript 1.6.3
(function() {
  define(['../array/last', '../array/slice', '../array/push', '../array/toArray', '../array/toArrayLike', '../array/toLength', '../promise/type'], function(last, slice, push, toArray, toArrayLike, toLength, type) {
    var Point;
    return Point = (function() {
      function Point() {
        var args, len;
        args = slice.apply(arguments);
        if (args.length === 1 && type('array', args[0])) {
          args = args[0];
        }
        if (type('string', last(args))) {
          type = args.pop();
        } else {
          type = args.length + 'D';
        }
        this.type = type;
        len = args.length;
        switch (type) {
          case '2D':
            len = 2;
            break;
          case '3D':
            len = 3;
            break;
          case 'polar':
            len = 2;
            break;
        }
        toArrayLike(this, args.slice(0, len));
        this.be = 'point';
        this;
      }

      Point.prototype.set = function() {
        var args, len;
        args = slice.apply(arguments);
        if (args.length === 1 && type('array', args[0])) {
          args = args[0];
        }
        args = toArray(arguments, 0, len);
        len = this.length;
        while (--len) {
          this[len] = args[len];
        }
        return this;
      };

      Point.prototype.toIndex = function(s) {
        var map;
        map = {
          x: 0,
          y: 1,
          z: 2,
          r: 0,
          j: 1
        };
        return map[s.toLowerCase()];
      };

      Point.prototype.get = function(s) {
        var pos;
        s = this.toIndex(s);
        pos = toArray(this);
        if (type('undefined', s)) {
          return pos;
        } else {
          return pos[s];
        }
      };

      Point.prototype.clone = function() {
        var args;
        args = this.get();
        args.push(this.type);
        return new Point(args);
      };

      Point.prototype.translate = function() {
        var a, arg, args, i, len, now, _i, _j, _len, _len1;
        args = toArray(arguments);
        now = this.get();
        len = this.length;
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          arg = toLength(arg, len);
          for (i = _j = 0, _len1 = arg.length; _j < _len1; i = ++_j) {
            a = arg[i];
            now[i] += a;
          }
        }
        this.set(now);
        return this;
      };

      Point.prototype.sym = function(p) {
        if (type('point', p) || type('arrayLike', p)) {
          return this.translate([2 * (p[0] - this[0]), 2 * (p[1] - this[1])]);
        } else if (type('graphic', p)) {
          return this.sym(this.getFootPoint(p));
        }
      };

      Point.prototype.getFootPoint = function(line) {
        var a, b, foot, x, y;
        if (this.type === '2D') {
          a = line.a;
          b = line.b;
          x = this.get('x');
          y = this.get('y');
          foot = [];
          foot[0] = (y - b + x / a) * a / (a + 1);
          foot[1] = a * foot[0] + b;
          return foot;
        }
      };

      return Point;

    })();
  });

}).call(this);
